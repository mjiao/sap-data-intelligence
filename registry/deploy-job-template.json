{
   "apiVersion": "template.openshift.io/v1",
   "description": "TODO",
   "kind": "Template",
   "message": "TODO",
   "metadata": {
      "annotations": {
         "description": "TODO",
         "openshift.io/display-name": "Job to deploy a container image registry.\n",
         "openshift.io/documentation-url": "https://access.redhat.com/articles/4324391",
         "openshift.io/provider-display-name": "Red Hat, Inc.",
         "sdi-observer/version": "0.1.4"
      },
      "name": "deploy-registry"
   },
   "objects": [
      {
         "apiVersion": "batch/v1",
         "kind": "Job",
         "metadata": {
            "name": "deploy-registry",
            "namespace": "${NAMESPACE}",
            "sdi-observer/version": "0.1.4"
         },
         "spec": {
            "activeDeadlineSeconds": 1800,
            "backoffLimit": 9999,
            "completions": 1,
            "parallelism": 1,
            "template": {
               "metadata": {
                  "labels": {
                     "job": "deploy-registry"
                  }
               },
               "spec": {
                  "containers": [
                     {
                        "args": "${{SCRIPT_ARGUMENTS}}",
                        "command": [
                           "deploy-registry.sh"
                        ],
                        "env": [
                           {
                              "name": "DRY_RUN",
                              "value": "${DRY_RUN}"
                           },
                           {
                              "name": "NAMESPACE",
                              "value": "${NAMESPACE}"
                           },
                           {
                              "name": "FORCE_REDEPLOY",
                              "value": "${FORCE_REDEPLOY}"
                           },
                           {
                              "name": "REPLACE_SECRETS",
                              "value": "${REPLACE_SECRETS}"
                           },
                           {
                              "name": "REPLACE_PERSISTENT_VOLUME_CLAIMS",
                              "value": "${REPLACE_PERSISTENT_VOLUME_CLAIMS}"
                           },
                           {
                              "name": "SDI_REGISTRY_STORAGE_CLASS_NAME",
                              "value": "${SDI_REGISTRY_STORAGE_CLASS_NAME}"
                           },
                           {
                              "name": "SDI_REGISTRY_USERNAME",
                              "value": "${SDI_REGISTRY_USERNAME}"
                           },
                           {
                              "name": "SDI_REGISTRY_PASSWORD",
                              "value": "${SDI_REGISTRY_PASSWORD}"
                           },
                           {
                              "name": "SDI_REGISTRY_AUTHENTICATION",
                              "value": "${SDI_REGISTRY_AUTHENTICATION}"
                           },
                           {
                              "name": "SDI_REGISTRY_HTPASSWD_SECRET_NAME",
                              "value": "${SDI_REGISTRY_HTPASSWD_SECRET_NAME}"
                           },
                           {
                              "name": "SDI_REGISTRY_ROUTE_HOSTNAME",
                              "value": "${SDI_REGISTRY_ROUTE_HOSTNAME}"
                           },
                           {
                              "name": "SDI_REGISTRY_HTTP_SECRET",
                              "value": "${SDI_REGISTRY_HTTP_SECRET}"
                           },
                           {
                              "name": "SDI_REGISTRY_VOLUME_CAPACITY",
                              "value": "${SDI_REGISTRY_VOLUME_CAPACITY}"
                           },
                           {
                              "name": "SDI_REGISTRY_VOLUME_ACCESS_MODE",
                              "value": "${SDI_REGISTRY_VOLUME_ACCESS_MODE}"
                           },
                           {
                              "name": "EXPOSE_WITH_LETSENCRYPT",
                              "value": "${EXPOSE_WITH_LETSENCRYPT}"
                           },
                           {
                              "name": "REDHAT_REGISTRY_SECRET_NAME",
                              "value": "${REDHAT_REGISTRY_SECRET_NAME}"
                           },
                           {
                              "name": "OCP_MINOR_RELEASE",
                              "value": "${OCP_MINOR_RELEASE}"
                           },
                           {
                              "name": "SDI_OBSERVER_REPOSITORY",
                              "value": "${SDI_OBSERVER_REPOSITORY}"
                           },
                           {
                              "name": "SDI_OBSERVER_GIT_REVISION",
                              "value": "${SDI_OBSERVER_GIT_REVISION}"
                           }
                        ],
                        "image": "${JOB_IMAGE}",
                        "name": "deploy-sdi-registry"
                     }
                  ],
                  "restartPolicy": "OnFailure",
                  "serviceAccountName": "sdi-observer"
               }
            }
         }
      },
      {
         "apiVersion": "v1",
         "kind": "ServiceAccount",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer",
            "namespace": "${NAMESPACE}"
         }
      },
      {
         "apiVersion": "rbac.authorization.k8s.io/v1",
         "kind": "ClusterRoleBinding",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer-admin-in-${NAMESPACE}"
         },
         "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "ClusterRole",
            "name": "admin"
         },
         "subjects": [
            {
               "kind": "ServiceAccount",
               "name": "sdi-observer",
               "namespace": "${NAMESPACE}"
            }
         ]
      },
      {
         "apiVersion": "rbac.authorization.k8s.io/v1",
         "kind": "ClusterRole",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer-cluster-access-in-${NAMESPACE}"
         },
         "rules": [
            {
               "apiGroups": [
                  "config.openshift.io"
               ],
               "resources": [
                  "ingresses",
                  "clusteroperators"
               ],
               "verbs": [
                  "get",
                  "list",
                  "watch"
               ]
            },
            {
               "apiGroups": [
                  ""
               ],
               "resources": [
                  "namespaces"
               ],
               "verbs": [
                  "get",
                  "list",
                  "watch",
                  "patch",
                  "update",
                  "delete"
               ]
            }
         ]
      },
      {
         "apiVersion": "rbac.authorization.k8s.io/v1",
         "kind": "ClusterRoleBinding",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "deploymentconfig": "sdi-observer"
            },
            "name": "sdi-observer-cluster-access-in-${NAMESPACE}"
         },
         "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "ClusterRole",
            "name": "sdi-observer-cluster-access-in-${NAMESPACE}"
         },
         "subjects": [
            {
               "kind": "ServiceAccount",
               "name": "sdi-observer",
               "namespace": "${NAMESPACE}"
            }
         ]
      },
      {
         "apiVersion": "build.openshift.io/v1",
         "kind": "BuildConfig",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy",
               "deploymentconfig": "sdi-observer",
               "sdi-observer/version": "0.1.4"
            },
            "name": "sdi-observer",
            "namespace": "${NAMESPACE}"
         },
         "spec": {
            "output": {
               "to": {
                  "kind": "ImageStreamTag",
                  "name": "sdi-observer:0.1.4-ocp${OCP_MINOR_RELEASE}"
               }
            },
            "runPolicy": "Serial",
            "source": {
               "dockerfile": "FROM openshift/cli:latest\nRUN dnf update -y --skip-broken --nobest ||:\n# TODO: jq is not yet available in EPEL-8\nRUN dnf install -y \\\n  https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm && \\\n  dnf install -y jq\nRUN dnf install -y \\\n  https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm && \\\n  dnf install -y parallel procps-ng bc git httpd-tools && dnf clean all -y\n# TODO: determine OCP version from environment\nRUN cd tmp; \\\n  curl -L -O https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-${OCP_MINOR_RELEASE}/openshift-client-linux.tar.gz; \\\n  curl -L -O https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest-${OCP_MINOR_RELEASE}/sha256sum.txt\n# verify the downloaded tar\nRUN /bin/bash -c 'f=/tmp/openshift-client-linux.tar.gz; \\\n  got=\"$(awk '\"'\"'{print $1}'\"'\"' <(sha256sum \"$f\"))\"; \\\n  exp=\"$(awk '\"'\"'/openshift-client-linux-/ {print $1}'\"'\"' /tmp/sha256sum.txt | head -n 1)\"; \\\n  if [[ \"$got\" != \"$exp\" ]]; then printf \\\n    '\"'\"'Unexpected hashsum of %s (expected \"%s\", got \"%s\")\\n!'\"'\"' \"$f\" \"$exp\" \"$got\" >&2; \\\n    exit 1; \\\n  fi'\nRUN /bin/bash -c 'tar -C /usr/local/bin/ -xzvf /tmp/openshift-client-linux.tar.gz -T <(printf oc)'\nRUN rm -rfv /tmp/*\n# TODO: verify signatures as well\nRUN mkdir -p /usr/local/bin /usr/local/share/openshift-acme\nRUN git clone --depth 5 --single-branch \\\n  --branch ${LETSENCRYPT_REVISION} \\\n  ${LETSENCRYPT_REPOSITORY} /usr/local/share/openshift-acme\nRUN git clone --depth 5 --single-branch \\\n  --branch ${SDI_OBSERVER_GIT_REVISION} \\\n  ${SDI_OBSERVER_REPOSITORY} /usr/local/share/sap-data-intelligence\nRUN for bin in observer.sh deploy-registry.sh deploy-letsencrypt.sh; do \\\n      cp -lv $(find /usr/local/share/sap-data-intelligence \\\n                -type f -executable -name \"$bin\") \\\n        /usr/local/bin/$bin; \\\n      chmod a+rx /usr/local/bin/$bin; \\\n    done\nRUN ln -s /usr/local/share/sap-data-intelligence /usr/local/share/sdi\nWORKDIR /usr/local/share/sdi\nCMD [\"/usr/local/bin/observer.sh\"]"
            },
            "strategy": {
               "dockerStrategy": {
                  "from": {
                     "kind": "ImageStreamTag",
                     "name": "ubi8:latest"
                  },
                  "imageOptimizationPolicy": "SkipLayers",
                  "pullSecret": {
                     "name": "${REDHAT_REGISTRY_SECRET_NAME}"
                  }
               }
            },
            "triggers": [
               {
                  "type": "ImageChange"
               },
               {
                  "type": "ConfigChange"
               }
            ]
         }
      },
      {
         "apiVersion": "v1",
         "kind": "ImageStream",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy"
            },
            "name": "sdi-observer",
            "namespace": "${NAMESPACE}"
         },
         "spec": null,
         "status": {
            "dockerImageRepository": ""
         }
      },
      {
         "apiVersion": "v1",
         "kind": "ImageStream",
         "metadata": {
            "labels": {
               "created-by": "registry-deploy"
            },
            "name": "ubi8",
            "namespace": "${NAMESPACE}"
         },
         "spec": {
            "tags": [
               {
                  "from": {
                     "kind": "DockerImage",
                     "name": "registry.redhat.io/ubi8/ubi:latest"
                  },
                  "importPolicy": {
                     "scheduled": true
                  },
                  "name": "latest",
                  "referencePolicy": {
                     "type": "Source"
                  }
               }
            ]
         },
         "status": {
            "dockerImageRepository": ""
         }
      }
   ],
   "parameters": [
      {
         "description": "If set to true, no action will be performed. The pod will just print\nwhat would have been executed.\n",
         "name": "DRY_RUN",
         "required": false,
         "value": "false"
      },
      {
         "description": "The desired namespace to deploy resources to. Defaults to the current\none.\n",
         "name": "NAMESPACE",
         "required": true
      },
      {
         "description": "Whether to forcefully replace existing objects and configuration files. To replace\nexising secrets as well, RECREATE_SECRETS needs to be set.\n",
         "name": "FORCE_REDEPLOY",
         "required": false,
         "value": "false"
      },
      {
         "description": "Whether to replace secrets like SDI Registry's htpasswd file if they exist already.\n",
         "name": "REPLACE_SECRETS",
         "required": false,
         "value": "false"
      },
      {
         "description": "Whether to replace existing persistent volume claims like the one belonging to SDI\nRegistry.\n",
         "name": "REPLACE_PERSISTENT_VOLUME_CLAIMS",
         "required": false,
         "value": "false"
      },
      {
         "description": "Unless given, the default storage class will be used.\n",
         "name": "SDI_REGISTRY_STORAGE_CLASS_NAME",
         "required": false
      },
      {
         "description": "Will be used to generate htpasswd file to provide authentication data to the SDI Registry\nservice as long as SDI_REGISTRY_HTPASSWD_SECRET_NAME does not exist or REPLACE_SECRETS is\n\"true\".\n",
         "from": "user-[a-z0-9]{6}",
         "generate": "expression",
         "name": "SDI_REGISTRY_USERNAME",
         "required": false
      },
      {
         "description": "Will be used to generate htpasswd file to provide authentication data to the SDI Registry\nservice as long as SDI_REGISTRY_HTPASSWD_SECRET_NAME does not exist or REPLACE_SECRETS is\n\"true\".\n",
         "from": "[a-zA-Z0-9]{32}",
         "generate": "expression",
         "name": "SDI_REGISTRY_PASSWORD",
         "required": false
      },
      {
         "description": "Choose the authentication method of the SDI Registry. Value \"none\" disables authentication\naltogether. Defaults to \"basic\" where the provided htpasswd file is used to gate\nthe incoming authentication requests.\n",
         "name": "SDI_REGISTRY_AUTHENTICATION",
         "required": false,
         "value": "basic"
      },
      {
         "description": "A secret with htpasswd file with authentication data for the sdi image container If\ngiven and the secret exists, it will be used instead of SDI_REGISTRY_USERNAME and\nSDI_REGISTRY_PASSWORD.\n",
         "name": "SDI_REGISTRY_HTPASSWD_SECRET_NAME",
         "required": true,
         "value": "container-image-registry-htpasswd"
      },
      {
         "description": "Desired hostname of the exposed registry service. Defaults to\ncontainer-image-registry-<NAMESPACE>-apps.<cluster_name>.<base_domain>\n",
         "name": "SDI_REGISTRY_ROUTE_HOSTNAME",
         "required": false
      },
      {
         "description": "A random piece of data used to sign state that may be stored with the client to protect\nagainst tampering. If omitted, the registry will automatically generate a secret when it\nstarts. If using multiple replicas of registry, the secret MUST be the same for all of\nthem.\n",
         "from": "[a-zA-Z0-9]{32}",
         "generate": "expression",
         "name": "SDI_REGISTRY_HTTP_SECRET",
         "required": false
      },
      {
         "description": "Volume space available for container images (e.g. 120Gi).\n",
         "name": "SDI_REGISTRY_VOLUME_CAPACITY",
         "required": true,
         "value": "120Gi"
      },
      {
         "description": "If the given SDI_REGISTRY_STORAGE_CLASS_NAME or the default storate class supports\n\"ReadWriteMany\" (\"RWX\") access mode, please change this to \"ReadWriteMany\".\n",
         "name": "SDI_REGISTRY_VOLUME_ACCESS_MODE",
         "required": false,
         "value": "ReadWriteOnce"
      },
      {
         "description": "Whether to expose routes annotated for letsencrypt controller. Requires project admin\nrole attached to the sdi-observer service account. Letsencrypt controller must be\ndeployed either via this observer or cluster-wide for this to have an effect.\n",
         "name": "EXPOSE_WITH_LETSENCRYPT",
         "value": "false"
      },
      {
         "description": "Name of the secret with credentials for registry.redhat.io registry. Please visit\nhttps://access.redhat.com/terms-based-registry/ to obtain the OpenShift secret. For more details, please refer to https://access.redhat.com/RegistryAuthentication\n",
         "name": "REDHAT_REGISTRY_SECRET_NAME",
         "required": true
      },
      {
         "description": "Minor release of OpenShift Container Platform (e.g. 4.2). This value must match the OCP\nserver version. The biggest tolerated difference between the versions is 1 in the second\ndigit.\n",
         "name": "OCP_MINOR_RELEASE",
         "required": true,
         "value": "4.2"
      },
      {
         "description": "URL of SDI Observer's git repository to clone into sdi-observer image.\n",
         "name": "SDI_OBSERVER_REPOSITORY",
         "required": true,
         "value": "https://github.com/redhat-sap/sap-data-intelligence"
      },
      {
         "description": "Revision (e.g. tag, commit or branch) of SDI Observer's git repository to check out.\n",
         "name": "SDI_OBSERVER_GIT_REVISION",
         "required": true,
         "value": "master"
      },
      {
         "description": "Pull specification of the built SDI Observer image.\n",
         "name": "JOB_IMAGE",
         "required": true,
         "value": null
      },
      {
         "description": "Arguments for job's script. Passed as a json array of strings.\n",
         "name": "SCRIPT_ARGUMENTS",
         "required": false,
         "value": "[\"--wait\"]"
      }
   ]
}
